import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";

const feedbackSchema = z.object({
  name: z
    .string()
    .min(1, "–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è")
    .min(2, "–Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏")
    .max(50, "–Ü–º'—è –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 50 —Å–∏–º–≤–æ–ª—ñ–≤"),
  communicationMethod: z.enum(["whatsapp", "telegram", "signal"]),
  contact: z
    .string()
    .min(1, "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è")
    .refine((value) => {
      const phoneRegex = /^\+?[\d\s\-\(\)]{7,}$/;
      const usernameRegex = /^@?[a-zA-Z0-9_]{3,}$/;
      return phoneRegex.test(value) || usernameRegex.test(value);
    }, "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ username"),
  message: z
    .string()
    .min(1, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è")
    .min(5, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤")
    .max(500, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 500 —Å–∏–º–≤–æ–ª—ñ–≤"),
  timestamp: z.string().optional(),
});

type FeedbackData = z.infer<typeof feedbackSchema>;

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

async function sendToTelegram(data: FeedbackData): Promise<boolean> {
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    console.error("Telegram bot token or chat ID not configured");
    throw new Error("Telegram configuration missing");
  }

  const communicationMethodLabels = {
    whatsapp: "WhatsApp",
    telegram: "Telegram",
    signal: "Signal",
  };

  const messageText = `
üîî *–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É*

üë§ *–Ü–º'—è:* ${data.name}
üì± *–°–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É:* ${communicationMethodLabels[data.communicationMethod]}
üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* ${data.contact}

üí¨ *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:*
${data.message}

üïê *–ß–∞—Å:* ${data.timestamp ? new Date(data.timestamp).toLocaleString("uk-UA") : new Date().toLocaleString("uk-UA")}
  `.trim();

  const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

  try {
    const response = await fetch(telegramUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: messageText,
        parse_mode: "Markdown",
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error("Telegram API error:", errorData);
      throw new Error(`Telegram API error: ${response.status}`);
    }

    return true;
  } catch (error) {
    console.error("Error sending to Telegram:", error);
    throw error;
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();

    const validationResult = feedbackSchema.safeParse(body);

    if (!validationResult.success) {
      return NextResponse.json(
        {
          error: "Validation failed",
          details: validationResult.error.format(),
        },
        { status: 400 },
      );
    }

    const feedbackData = validationResult.data;

    await sendToTelegram(feedbackData);

    return NextResponse.json(
      {
        success: true,
        message: "–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞",
      },
      { status: 200 },
    );
  } catch (error) {
    console.error("API Error:", error);
    if (error instanceof SyntaxError) {
      return NextResponse.json(
        { error: "Invalid JSON format" },
        { status: 400 },
      );
    }

    return NextResponse.json(
      {
        error: "Internal server error",
        message: "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ",
      },
      { status: 500 },
    );
  }
}

export async function GET() {
  return NextResponse.json({ error: "Method not allowed" }, { status: 405 });
}
